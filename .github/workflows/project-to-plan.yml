name: PROJECT to PLAN

on:
  workflow_dispatch:  # Manual trigger for testing
  schedule:
    - cron: '0 * * * *'  # Run at the start of every hour

permissions:
  contents: write
  repository-projects: read

jobs:
  update-plan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Update PLAN.md from Project
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
          PROJECT_NUMBER: 2
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Status mapping (reverse of the other workflow)
            const statusMap = {
              'BACKLOG': 'BACKLOG',
              'IN PROGRESS': 'IN PROGRESS',
              'TESTING': 'TESTING',
              'COMPLETE': 'COMPLETE',
              'NOT PLANNED': 'NOT PLANNED'
            };
            
            try {
              // Get all project items
              const projectQuery = `
                query($owner: String!, $number: Int!) {
                  user(login: $owner) {
                    projectV2(number: $number) {
                      items(first: 100) {
                        nodes {
                          id
                          content {
                            ... on DraftIssue {
                              title
                            }
                          }
                          fieldValues(first: 8) {
                            nodes {
                              ... on ProjectV2ItemFieldSingleSelectValue {
                                name
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const projectResult = await github.graphql(projectQuery, {
                owner: context.repo.owner,
                number: parseInt(process.env.PROJECT_NUMBER)
              });
              
              // Organize items by status
              const sections = {
                'BACKLOG': [],
                'IN PROGRESS': [],
                'TESTING': [],
                'COMPLETE': [],
                'NOT PLANNED': []
              };
              
              // Process project items
              for (const item of projectResult.user.projectV2.items.nodes) {
                if (!item.content) continue; // Skip items without content
                
                const status = item.fieldValues.nodes.find(field => field.name)?.name || 'BACKLOG';
                const section = statusMap[status] || 'BACKLOG';
                
                sections[section].push({
                  title: item.content.title
                });
              }
              
              // Generate new PLAN.md content
              let planContent = '# Coffee Pub Crier - Tasks\n\n';
              
              for (const [section, items] of Object.entries(sections)) {
                planContent += `## ${section}\n`;
                for (const item of items) {
                  planContent += `- ${item.title}\n`;
                }
                planContent += '\n';
              }
              
              // Write the new content
              fs.writeFileSync('PLAN.md', planContent);
              
              // Create commit
              const { repo, owner } = context.repo;
              const currentBranch = 'master';
              
              // Get the current commit SHA
              const { data: ref } = await github.rest.git.getRef({
                owner,
                repo,
                ref: `heads/${currentBranch}`,
              });
              const currentSha = ref.object.sha;
              
              // Create blob with new content
              const { data: blob } = await github.rest.git.createBlob({
                owner,
                repo,
                content: planContent,
                encoding: 'utf-8',
              });
              
              // Create tree
              const { data: tree } = await github.rest.git.createTree({
                owner,
                repo,
                base_tree: currentSha,
                tree: [{
                  path: 'PLAN.md',
                  mode: '100644',
                  type: 'blob',
                  sha: blob.sha,
                }],
              });
              
              // Create commit
              const { data: commit } = await github.rest.git.createCommit({
                owner,
                repo,
                message: 'docs: sync PLAN.md with project status',
                tree: tree.sha,
                parents: [currentSha],
              });
              
              // Update branch reference
              await github.rest.git.updateRef({
                owner,
                repo,
                ref: `heads/${currentBranch}`,
                sha: commit.sha,
              });
              
              console.log('Successfully updated PLAN.md');
              
            } catch (error) {
              console.error('Error updating PLAN.md:', error);
              console.error('Full error:', JSON.stringify(error, null, 2));
              process.exit(1);
            } 