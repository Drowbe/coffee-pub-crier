name: Cleanup Issues and Project

on:
  workflow_dispatch:  # Manual trigger only

permissions:
  issues: write
  repository-projects: write

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup Issues and Project Items
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
          PROJECT_NUMBER: 2
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            // First, get all issues
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              per_page: 100
            });
            
            console.log(`Found ${issues.length} issues to clean up`);
            
            // Lock and close all issues
            for (const issue of issues) {
              if (!issue.pull_request) {  // Skip pull requests
                // Close the issue
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed',
                  state_reason: 'not_planned'
                });
                
                // Lock the issue
                await github.rest.issues.lock({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  lock_reason: 'resolved'
                });
                
                console.log(`Closed and locked issue #${issue.number}: ${issue.title}`);
              }
            }
            
            // Now clean up project items
            const projectQuery = `
              query($owner: String!, $number: Int!) {
                user(login: $owner) {
                  projectV2(number: $number) {
                    id
                    items(first: 100) {
                      nodes {
                        id
                      }
                    }
                  }
                }
              }
            `;
            
            const projectResult = await github.graphql(projectQuery, {
              owner: context.repo.owner,
              number: parseInt(process.env.PROJECT_NUMBER)
            });
            
            const project = projectResult.user.projectV2;
            const items = project.items.nodes;
            
            console.log(`Found ${items.length} project items to clean up`);
            
            // Delete each project item
            for (const item of items) {
              const deleteItemMutation = `
                mutation($projectId: ID!, $itemId: ID!) {
                  deleteProjectV2Item(input: {
                    projectId: $projectId
                    itemId: $itemId
                  }) {
                    deletedItemId
                  }
                }
              `;
              
              await github.graphql(deleteItemMutation, {
                projectId: project.id,
                itemId: item.id
              });
              
              console.log(`Deleted project item ${item.id}`);
            }
            
            console.log('Cleanup complete'); 