name: GITHUB to ISSUES

on:
  workflow_dispatch:  # Manual trigger for testing
  schedule:
    - cron: '0 * * * *'  # Run at the start of every hour
  issues:
    types: [opened, closed, reopened, transferred]

permissions:
  contents: write
  issues: read

jobs:
  update-issues:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Update ISSUES.md from GitHub Issues
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const fs = require('fs');
            
            try {
              // Get all issues
              const { data: issues } = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'all',
                labels: 'crier',
                per_page: 100
              });
              
              // Organize issues by status
              const sections = {
                'BACKLOG': [],
                'IN PROGRESS': [],
                'TESTING': [],
                'COMPLETE': []
              };
              
              // Sort issues into sections
              for (const issue of issues) {
                const section = issue.state === 'closed' ? 'COMPLETE' : 'BACKLOG';
                sections[section].push({
                  title: issue.title
                });
              }
              
              // Generate new ISSUES.md content
              let issuesContent = '# Coffee Pub Crier - Issues\n\n';
              
              for (const [section, items] of Object.entries(sections)) {
                issuesContent += `## ${section}\n`;
                for (const issue of items) {
                  issuesContent += `- ${issue.title}\n`;
                }
                issuesContent += '\n';
              }
              
              // Write the new content
              fs.writeFileSync('ISSUES.md', issuesContent);
              
              // Create commit
              const { repo, owner } = context.repo;
              const currentBranch = 'master';
              
              // Get the current commit SHA
              const { data: ref } = await github.rest.git.getRef({
                owner,
                repo,
                ref: `heads/${currentBranch}`,
              });
              const currentSha = ref.object.sha;
              
              // Create blob with new content
              const { data: blob } = await github.rest.git.createBlob({
                owner,
                repo,
                content: issuesContent,
                encoding: 'utf-8',
              });
              
              // Create tree
              const { data: tree } = await github.rest.git.createTree({
                owner,
                repo,
                base_tree: currentSha,
                tree: [{
                  path: 'ISSUES.md',
                  mode: '100644',
                  type: 'blob',
                  sha: blob.sha,
                }],
              });
              
              // Create commit
              const { data: commit } = await github.rest.git.createCommit({
                owner,
                repo,
                message: 'docs: sync ISSUES.md with GitHub Issues',
                tree: tree.sha,
                parents: [currentSha],
              });
              
              // Update branch reference
              await github.rest.git.updateRef({
                owner,
                repo,
                ref: `heads/${currentBranch}`,
                sha: commit.sha,
              });
              
              console.log('Successfully updated ISSUES.md');
              
            } catch (error) {
              console.error('Error updating ISSUES.md:', error);
              console.error('Full error:', JSON.stringify(error, null, 2));
              process.exit(1);
            } 