name: ISSUES to ROADMAP

on:
  issues:
    types: [opened, edited, deleted, transferred, closed, reopened]
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write
  issues: read
  repository-projects: read

jobs:
  sync-to-roadmap:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: master
          
      - name: Update ROADMAP.md from Issues
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const fs = require('fs');
            
            try {
              // Get all issues with their project data
              const issuesQuery = `
                query($owner: String!, $repo: String!) {
                  repository(owner: $owner, name: $repo) {
                    issues(first: 100, states: [OPEN, CLOSED]) {
                      nodes {
                        id
                        title
                        state
                        labels(first: 10) {
                          nodes {
                            name
                          }
                        }
                        projectItems(first: 1) {
                          nodes {
                            fieldValues(first: 10) {
                              nodes {
                                ... on ProjectV2ItemFieldSingleSelectValue {
                                  name
                                  field {
                                    ... on ProjectV2SingleSelectField {
                                      name
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const issuesResult = await github.graphql(issuesQuery, {
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              
              // Organize issues by status
              const sections = {
                'BACKLOG': [],
                'IN PROGRESS': [],
                'TESTING': [],
                'CLOSED': []
              };
              
              for (const issue of issuesResult.repository.issues.nodes) {
                // Get priority and status from project fields
                let priority = 'P0';
                let status = issue.state === 'CLOSED' ? 'CLOSED' : 'BACKLOG';
                
                if (issue.projectItems.nodes.length > 0) {
                  const fields = issue.projectItems.nodes[0].fieldValues.nodes;
                  for (const field of fields) {
                    if (field.field?.name === 'Priority') {
                      priority = field.name;
                    }
                    if (field.field?.name === 'Status') {
                      status = field.name;
                    }
                  }
                }
                
                // Get labels
                const labels = issue.labels.nodes.map(label => label.name);
                // Remove 'crier' from the list since we'll add it back first
                const otherLabels = labels.filter(label => label !== 'crier');
                const labelString = ['crier', ...otherLabels].join(', ');
                
                // Create the issue line
                const issueLine = `- ${issue.title} [Priority: ${priority}] [Label: ${labelString}]`;
                
                // Add to appropriate section
                sections[status].push(issueLine);
              }
              
              // Create the new ROADMAP.md content
              let content = '# Coffee Pub Crier - ROADMAP\n\n';
              
              // Add each section with sorted issues
              for (const [section, issues] of Object.entries(sections)) {
                content += `## ${section}\n`;
                // Sort issues by priority (P0 -> P4)
                issues.sort((a, b) => {
                  const priorityA = a.match(/\[Priority: (P\d+)\]/)[1];
                  const priorityB = b.match(/\[Priority: (P\d+)\]/)[1];
                  return priorityA.localeCompare(priorityB);
                });
                content += issues.join('\n') + '\n\n';
              }
              
              // Write the new content to ROADMAP.md
              fs.writeFileSync('ROADMAP.md', content);
              
              // Commit and push the changes
              const { stdout: gitStatus } = await exec.getExecOutput('git status --porcelain');
              if (gitStatus) {
                await exec.exec('git', ['config', '--global', 'user.email', 'github-actions[bot]@users.noreply.github.com']);
                await exec.exec('git', ['config', '--global', 'user.name', 'github-actions[bot]']);
                await exec.exec('git', ['add', 'ROADMAP.md']);
                await exec.exec('git', ['commit', '-m', 'docs: update ROADMAP.md from issues']);
                await exec.exec('git', ['push']);
              }
              
              console.log('Successfully synced issues to ROADMAP.md');
              
            } catch (error) {
              console.error('Error syncing issues to ROADMAP.md:', error);
              console.error('Full error:', JSON.stringify(error, null, 2));
              process.exit(1);
            } 