name: ISSUES to GITHUB

on:
  push:
    paths:
      - 'ISSUES.md'
    branches:
      - master
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: read
  issues: write

jobs:
  sync-to-github:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Update GitHub Issues from ISSUES.md
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Status mapping to issue states
            const statusMap = {
              'BACKLOG': 'open',
              'IN PROGRESS': 'open',
              'TESTING': 'open',
              'COMPLETE': 'closed'
            };
            
            try {
              // Read and parse ISSUES.md
              const content = fs.readFileSync('ISSUES.md', 'utf8');
              const sections = {};
              let currentSection = null;
              
              // Parse the markdown content
              for (const line of content.split('\n')) {
                if (line.startsWith('## ')) {
                  currentSection = line.substring(3).trim();
                  sections[currentSection] = [];
                } else if (line.startsWith('- ') && currentSection) {
                  sections[currentSection].push(line.substring(2).trim());
                }
              }
              
              // Get all existing issues
              const { data: existingIssues } = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'all',
                per_page: 100
              });
              
              // Create a map of existing issues by title
              const existingIssuesMap = new Map();
              for (const issue of existingIssues) {
                existingIssuesMap.set(issue.title, {
                  number: issue.number,
                  state: issue.state
                });
              }
              
              // Process each section
              for (const [sectionName, items] of Object.entries(sections)) {
                const targetState = statusMap[sectionName] || 'open';
                
                for (const title of items) {
                  const existing = existingIssuesMap.get(title);
                  
                  if (existing) {
                    // Update state if different
                    if (existing.state !== targetState) {
                      await github.rest.issues.update({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: existing.number,
                        state: targetState
                      });
                    }
                  } else {
                    // Create new issue
                    await github.rest.issues.create({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      title: title,
                      labels: ['crier']
                    });
                  }
                }
              }
              
              console.log('Successfully synced ISSUES.md to GitHub Issues');
              
            } catch (error) {
              console.error('Error syncing ISSUES.md to GitHub Issues:', error);
              console.error('Full error:', JSON.stringify(error, null, 2));
              process.exit(1);
            } 
