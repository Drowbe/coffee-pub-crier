name: TODO to Project

on:
  push:
    paths:
      - 'TODO.md'
    branches:
      - master
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: read
  issues: write
  repository-projects: write

jobs:
  todo-to-project:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Parse TODO and Create Issues
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
          PROJECT_NUMBER: 2
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const fs = require('fs');
            const content = fs.readFileSync('TODO.md', 'utf8');
            
            // First, get project info to understand available status options
            const projectQuery = `
              query($owner: String!, $number: Int!) {
                user(login: $owner) {
                  projectV2(number: $number) {
                    id
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            const projectResult = await github.graphql(projectQuery, {
              owner: context.repo.owner,
              number: parseInt(process.env.PROJECT_NUMBER)
            });
            
            const projectId = projectResult.user.projectV2.id;
            const statusField = projectResult.user.projectV2.fields.nodes.find(
              field => field.name === 'Status'
            );
            
            // Enhanced logging
            console.log('Project Fields:', projectResult.user.projectV2.fields.nodes.map(f => ({ name: f.name, type: f.__typename })));
            if (statusField) {
              console.log('Status Field Options:', statusField.options.map(o => o.name));
              console.log('Status Field ID:', statusField.id);
            } else {
              console.log('No Status field found!');
              console.log('Available fields:', JSON.stringify(projectResult.user.projectV2.fields.nodes, null, 2));
            }
            
            // Define status mappings based on your project's actual status options
            const statusMap = {
              'BACKLOG': 'BACKLOG',
              'IN PROGRESS': 'IN PROGRESS',
              'TESTING': 'TESTING',
              'COMPLETE': 'COMPLETE'
            };
            
            // Log the current mapping
            console.log('Current Status Mapping:', statusMap);
            
            // Get all existing issues
            const { data: allIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              per_page: 100
            });
            
            // Parse sections and tasks
            const sections = content.split('\n## ').slice(1);
            
            for (const section of sections) {
              const [sectionName, ...tasks] = section.split('\n');
              const taskList = tasks
                .filter(line => line.trim().startsWith('-'))
                .map(line => ({
                  title: line.replace(/^-\s+/, '').trim()
                }));
              
              // Process each task
              for (const task of taskList) {
                try {
                  // Check if issue already exists
                  const existingIssue = allIssues.find(issue => 
                    issue.title.toLowerCase() === task.title.toLowerCase()
                  );
                  
                  let issueId;
                  
                  if (!existingIssue) {
                    // Create new issue
                    const { data: issue } = await github.rest.issues.create({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      title: task.title,
                      body: `Task from ${sectionName} section of TODO.md`,
                      labels: [sectionName.replace(/\s+/g, '-').toLowerCase()]
                    });
                    issueId = issue.node_id;
                  } else {
                    issueId = existingIssue.node_id;
                  }
                  
                  try {
                    // First, get the item ID if it's already in the project
                    const itemQuery = `
                      query($projectId: ID!) {
                        node(id: $projectId) {
                          ... on ProjectV2 {
                            items(first: 100) {
                              nodes {
                                id
                                content {
                                  ... on Issue {
                                    id
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    `;
                    
                    const itemResult = await github.graphql(itemQuery, {
                      projectId: projectId
                    });
                    
                    let itemId;
                    const existingItem = itemResult.node.items.nodes.find(
                      item => item.content?.id === issueId
                    );
                    
                    if (!existingItem) {
                      // Add to project if not already there
                      const addResult = await github.graphql(`
                        mutation($input: AddProjectV2ItemByIdInput!) {
                          addProjectV2ItemById(input: $input) {
                            item {
                              id
                            }
                          }
                        }
                      `, {
                        input: {
                          projectId: projectId,
                          contentId: issueId
                        }
                      });
                      
                      itemId = addResult.addProjectV2ItemById.item.id;
                    } else {
                      itemId = existingItem.id;
                    }
                    
                    // Set status
                    if (statusField) {
                      const desiredStatus = statusMap[sectionName];
                      console.log(`Mapping ${sectionName} to ${desiredStatus}`);
                      
                      const statusOption = statusField.options.find(
                        option => option.name === desiredStatus
                      );
                      
                      if (statusOption) {
                        await github.graphql(`
                          mutation($input: UpdateProjectV2ItemFieldValueInput!) {
                            updateProjectV2ItemFieldValue(input: $input) {
                              projectV2Item {
                                id
                              }
                            }
                          }
                        `, {
                          input: {
                            projectId: projectId,
                            itemId: itemId,
                            fieldId: statusField.id,
                            value: {
                              singleSelectOptionId: statusOption.id
                            }
                          }
                        });
                        
                        console.log(`Set status for "${task.title}" to ${desiredStatus}`);
                      } else {
                        console.error(`Could not find status option for ${desiredStatus}`);
                      }
                    }
                  } catch (error) {
                    console.error(`Error updating project item: ${error.message}`);
                    console.error('Full error:', JSON.stringify(error, null, 2));
                  }
                } catch (error) {
                  console.error(`Error processing task "${task.title}": ${error.message}`);
                  console.error('Full error:', JSON.stringify(error, null, 2));
                }
              }
            }
            
            console.log('Finished processing TODO.md'); 