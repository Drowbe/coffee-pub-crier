name: TODO to Project

on:
  push:
    paths:
      - 'TODO.md'
    branches:
      - master
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: read
  repository-projects: write
  issues: write

jobs:
  todo-to-project:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Parse TODO and Create Issues
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const content = fs.readFileSync('TODO.md', 'utf8');
            
            // Define status mappings
            const statusMap = {
              'Backlog': 'Todo',
              'In Progress': 'In Progress',
              'Testing': 'In Review',
              'Complete': 'Done'
            };
            
            // Parse sections and tasks
            const sections = content.split('\n## ').slice(1);
            
            for (const section of sections) {
              const [sectionName, ...tasks] = section.split('\n');
              const taskList = tasks
                .filter(line => line.trim().startsWith('- ['))
                .map(line => ({
                  title: line.replace(/- \[[ x]\] /, '').trim(),
                  completed: line.includes('- [x]')
                }));
              
              // Create issues for each task
              for (const task of taskList) {
                try {
                  // Check if issue already exists
                  const { data: existingIssues } = await github.rest.issues.listForRepo({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    state: 'all',
                    labels: [sectionName]
                  });
                  
                  const existingIssue = existingIssues.find(issue => 
                    issue.title.toLowerCase() === task.title.toLowerCase()
                  );
                  
                  if (!existingIssue) {
                    // Create new issue
                    const { data: issue } = await github.rest.issues.create({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      title: task.title,
                      body: `Task from ${sectionName} section of TODO.md`,
                      labels: [sectionName.replace(/\s+/g, '-').toLowerCase()],
                      state: task.completed ? 'closed' : 'open'
                    });
                    
                    // Add to project if project ID is set
                    if (process.env.PROJECT_NUMBER) {
                      try {
                        // Get project node ID
                        const projectQuery = `
                          query($org: String!, $number: Int!) {
                            organization(login: $org) {
                              projectV2(number: $number) {
                                id
                              }
                            }
                          }
                        `;
                        
                        const projectResult = await github.graphql(projectQuery, {
                          org: context.repo.owner,
                          number: parseInt(process.env.PROJECT_NUMBER)
                        });
                        
                        const projectId = projectResult.organization.projectV2.id;
                        
                        // Add issue to project
                        const addToProjectMutation = `
                          mutation($projectId: ID!, $contentId: ID!) {
                            addProjectV2ItemById(input: {
                              projectId: $projectId
                              contentId: $contentId
                            }) {
                              item {
                                id
                              }
                            }
                          }
                        `;
                        
                        await github.graphql(addToProjectMutation, {
                          projectId: projectId,
                          contentId: issue.node_id
                        });
                        
                        // Set status based on section
                        if (statusMap[sectionName]) {
                          // Update status field
                          // Note: You'll need to replace STATUS_FIELD_ID with your actual field ID
                          const updateStatusMutation = `
                            mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                              updateProjectV2ItemFieldValue(input: {
                                projectId: $projectId
                                itemId: $itemId
                                fieldId: $fieldId
                                value: { 
                                  singleSelectOptionId: $optionId
                                }
                              }) {
                                projectV2Item {
                                  id
                                }
                              }
                            }
                          `;
                          
                          // You'll need to implement the logic to get the correct optionId for each status
                          // This varies by project setup
                        }
                      } catch (error) {
                        console.error(`Error adding to project: ${error.message}`);
                      }
                    }
                    
                    console.log(`Created issue: ${task.title}`);
                  } else if (existingIssue.state === 'open' && task.completed) {
                    // Close issue if task is marked as completed
                    await github.rest.issues.update({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: existingIssue.number,
                      state: 'closed'
                    });
                    console.log(`Closed issue: ${task.title}`);
                  } else if (existingIssue.state === 'closed' && !task.completed) {
                    // Reopen issue if task is unmarked
                    await github.rest.issues.update({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: existingIssue.number,
                      state: 'open'
                    });
                    console.log(`Reopened issue: ${task.title}`);
                  }
                } catch (error) {
                  console.error(`Error processing task "${task.title}": ${error.message}`);
                }
              }
            }
            
            console.log('Finished processing TODO.md'); 