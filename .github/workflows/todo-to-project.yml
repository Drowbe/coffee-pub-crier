name: TODO to Project

on:
  push:
    paths:
      - 'TODO.md'
    branches:
      - master
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: read
  repository-projects: write
  issues: write
  project: write

env:
  PROJECT_NUMBER: 2

jobs:
  todo-to-project:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Parse TODO and Create Issues
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const content = fs.readFileSync('TODO.md', 'utf8');
            
            // Define status mappings
            const statusMap = {
              'Backlog': 'Todo',
              'In Progress': 'In Progress',
              'Testing': 'Review',
              'Complete': 'Done'
            };
            
            // Parse sections and tasks
            const sections = content.split('\n## ').slice(1);
            
            for (const section of sections) {
              const [sectionName, ...tasks] = section.split('\n');
              const taskList = tasks
                .filter(line => line.trim().startsWith('- ['))
                .map(line => ({
                  title: line.replace(/- \[[ x]\] /, '').trim(),
                  completed: line.includes('- [x]')
                }));
              
              // Create issues for each task
              for (const task of taskList) {
                try {
                  // Check if issue already exists
                  const { data: existingIssues } = await github.rest.issues.listForRepo({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    state: 'all',
                    labels: [sectionName]
                  });
                  
                  const existingIssue = existingIssues.find(issue => 
                    issue.title.toLowerCase() === task.title.toLowerCase()
                  );
                  
                  if (!existingIssue) {
                    // Create new issue
                    const { data: issue } = await github.rest.issues.create({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      title: task.title,
                      body: `Task from ${sectionName} section of TODO.md`,
                      labels: [sectionName.replace(/\s+/g, '-').toLowerCase()],
                      state: task.completed ? 'closed' : 'open'
                    });
                    
                    // Add to project
                    try {
                      // Get project info
                      const projectQuery = `
                        query($owner: String!, $repo: String!, $number: Int!) {
                          repository(owner: $owner, name: $repo) {
                            projectV2(number: $number) {
                              id
                              fields(first: 20) {
                                nodes {
                                  ... on ProjectV2SingleSelectField {
                                    id
                                    name
                                    options {
                                      id
                                      name
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      `;
                      
                      const projectResult = await github.graphql(projectQuery, {
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        number: parseInt(process.env.PROJECT_NUMBER)
                      });
                      
                      const project = projectResult.repository.projectV2;
                      const statusField = project.fields.nodes.find(
                        field => field.name === 'Status'
                      );
                      
                      // Add issue to project
                      const addToProjectMutation = `
                        mutation($projectId: ID!, $contentId: ID!) {
                          addProjectV2ItemById(input: {
                            projectId: $projectId
                            contentId: $contentId
                          }) {
                            item {
                              id
                            }
                          }
                        }
                      `;
                      
                      const addResult = await github.graphql(addToProjectMutation, {
                        projectId: project.id,
                        contentId: issue.node_id
                      });
                      
                      // Set status if we have the field
                      if (statusField) {
                        const statusOption = statusField.options.find(
                          option => option.name === statusMap[sectionName]
                        );
                        
                        if (statusOption) {
                          const updateStatusMutation = `
                            mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                              updateProjectV2ItemFieldValue(input: {
                                projectId: $projectId
                                itemId: $itemId
                                fieldId: $fieldId
                                value: { 
                                  singleSelectOptionId: $optionId
                                }
                              }) {
                                projectV2Item {
                                  id
                                }
                              }
                            }
                          `;
                          
                          await github.graphql(updateStatusMutation, {
                            projectId: project.id,
                            itemId: addResult.addProjectV2ItemById.item.id,
                            fieldId: statusField.id,
                            optionId: statusOption.id
                          });
                        }
                      }
                      
                      console.log(`Added issue to project in ${sectionName} status`);
                    } catch (error) {
                      console.error(`Error adding to project: ${error.message}`);
                      console.error('Full error:', JSON.stringify(error, null, 2));
                    }
                    
                    console.log(`Created issue: ${task.title}`);
                  } else if (existingIssue.state === 'open' && task.completed) {
                    // Close issue if task is marked as completed
                    await github.rest.issues.update({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: existingIssue.number,
                      state: 'closed'
                    });
                    console.log(`Closed issue: ${task.title}`);
                  } else if (existingIssue.state === 'closed' && !task.completed) {
                    // Reopen issue if task is unmarked
                    await github.rest.issues.update({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: existingIssue.number,
                      state: 'open'
                    });
                    console.log(`Reopened issue: ${task.title}`);
                  }
                } catch (error) {
                  console.error(`Error processing task "${task.title}": ${error.message}`);
                  console.error('Full error:', JSON.stringify(error, null, 2));
                }
              }
            }
            
            console.log('Finished processing TODO.md'); 